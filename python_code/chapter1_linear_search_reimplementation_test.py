import random
import argparse

import hash_chapter1_reimpl_js
import hash_chapter1_impl
import build_autogenerated_chapter1_hash

IMPLEMENTATIONS = {
    'ref': hash_chapter1_impl.linear_search,
    'js': hash_chapter1_reimpl_js.linear_search,
    'py_extracted': build_autogenerated_chapter1_hash.linear_search
}


def run(test_implementation, size):
    MAX_VAL = 5000
    ref_search = IMPLEMENTATIONS['ref']
    test_search = IMPLEMENTATIONS[test_implementation]

    numbers = [random.randint(-MAX_VAL, MAX_VAL) for _ in range(size)]

    for number in numbers:
        assert ref_search(numbers, number)
        assert test_search(numbers, number)

    for i in range(size * 3):
        number = random.randint(-MAX_VAL, MAX_VAL)
        assert ref_search(numbers, number) == test_search(numbers, number)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Stress-test chapter1 reimplementation')
    parser.add_argument('--test-implementation', choices=['py_extracted', 'js'], required=True)
    parser.add_argument('--size',  type=int, default=100)
    args = parser.parse_args()

    run(test_implementation=args.test_implementation,
        size=args.size)
