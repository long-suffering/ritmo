diff --git a/Objects/dictobject.c b/Objects/dictobject.c
index c10bfccdce..3734a08281 100644
--- a/Objects/dictobject.c
+++ b/Objects/dictobject.c
@@ -321,6 +321,8 @@ lookdict(PyDictObject *mp, PyObject *key, register Py_hash_t hash)
     PyObject *startkey;
 
     i = (size_t)hash & mask;
+    fprintf(stderr, "lookdict hash = %ld\n", hash);
+    fprintf(stderr, "initial i = %zu\n", i);
     ep = &ep0[i];
     if (ep->me_key == NULL || ep->me_key == key)
         return ep;
@@ -355,7 +357,9 @@ lookdict(PyDictObject *mp, PyObject *key, register Py_hash_t hash)
        least likely outcome, so test for that last. */
     for (perturb = hash; ; perturb >>= PERTURB_SHIFT) {
         i = (i << 2) + i + perturb + 1;
+        fprintf(stderr, "next i = %zu perturb = %zu\n", i, perturb);
         ep = &ep0[i & mask];
+        fprintf(stderr, "next i & mask = %zu perturb = %zu\n", i & mask, perturb);
         if (ep->me_key == NULL)
             return freeslot == NULL ? ep : freeslot;
         if (ep->me_key == key)
@@ -648,6 +652,7 @@ dictresize(PyDictObject *mp, Py_ssize_t minused)
         }
     }
     else {
+        fprintf(stderr, "PyMem_NEW branch");
         newtable = PyMem_NEW(PyDictEntry, newsize);
         if (newtable == NULL) {
             PyErr_NoMemory();
@@ -693,6 +698,7 @@ PyObject *
 _PyDict_NewPresized(Py_ssize_t minused)
 {
     PyObject *op = PyDict_New();
+    fprintf(stderr, "_PyDict_NewPresized() %p %d\n", op, (int)minused);
 
     if (minused>5 && op != NULL && dictresize((PyDictObject *)op, minused) == -1) {
         Py_DECREF(op);
diff --git a/Objects/longobject.c b/Objects/longobject.c
index e2a4ef9c5e..7d72c88417 100644
--- a/Objects/longobject.c
+++ b/Objects/longobject.c
@@ -2611,6 +2611,7 @@ long_hash(PyLongObject *v)
         sign = -1;
         i = -(i);
     }
+    fprintf(stderr, "i = %ld\n", i);
     while (--i >= 0) {
         /* Here x is a quantity in the range [0, _PyHASH_MODULUS); we
            want to compute x * 2**PyLong_SHIFT + v->ob_digit[i] modulo
